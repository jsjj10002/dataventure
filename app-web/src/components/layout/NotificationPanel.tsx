'use client';

import { useState, useEffect } from 'react';
import { Bell, Check, CheckCheck, X, Loader2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { notificationAPI, Notification } from '@/lib/api';
import { useAuthStore } from '@/stores/authStore';
import toast from 'react-hot-toast';

export default function NotificationPanel() {
  const { user, isAuthenticated } = useAuthStore();
  
  const [isOpen, setIsOpen] = useState(false);
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [isLoading, setIsLoading] = useState(false);

  // ÏïåÎ¶º Î°úÎìú
  useEffect(() => {
    if (isAuthenticated && isOpen) {
      loadNotifications();
    }
  }, [isAuthenticated, isOpen]);

  // Ï£ºÍ∏∞Ï†ÅÏúºÎ°ú ÎØ∏ÏùΩÏùå Í∞úÏàò Ï≤¥ÌÅ¨ (30Ï¥àÎßàÎã§)
  useEffect(() => {
    if (!isAuthenticated) return;
    
    const checkUnread = async () => {
      try {
        const response = await notificationAPI.getAll({ unreadOnly: true, limit: 1 });
        setUnreadCount(response.data.unreadCount);
      } catch (error) {
        // Ï°∞Ïö©Ìûà Ïã§Ìå® Ï≤òÎ¶¨
      }
    };
    
    checkUnread();
    
    const interval = setInterval(checkUnread, 30000); // 30Ï¥à
    
    return () => clearInterval(interval);
  }, [isAuthenticated]);

  // ÏïåÎ¶º Î™©Î°ù Î°úÎìú
  const loadNotifications = async () => {
    setIsLoading(true);
    
    try {
      const response = await notificationAPI.getAll({ limit: 20 });
      setNotifications(response.data.notifications);
      setUnreadCount(response.data.unreadCount);
    } catch (error: any) {
      console.error('ÏïåÎ¶º Î°úÎìú Ïã§Ìå®:', error);
      toast.error('ÏïåÎ¶ºÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoading(false);
    }
  };

  // ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
  const handleMarkAsRead = async (notificationId: string) => {
    try {
      await notificationAPI.markAsRead(notificationId);
      
      setNotifications((prev) =>
        prev.map((n) =>
          n.id === notificationId ? { ...n, read: true } : n
        )
      );
      
      setUnreadCount((prev) => Math.max(0, prev - 1));
    } catch (error: any) {
      console.error('ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨ Ïã§Ìå®:', error);
      toast.error('ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  // Î™®Îëê ÏùΩÏùå Ï≤òÎ¶¨
  const handleMarkAllAsRead = async () => {
    try {
      await notificationAPI.markAllAsRead();
      
      setNotifications((prev) =>
        prev.map((n) => ({ ...n, read: true }))
      );
      
      setUnreadCount(0);
      
      toast.success('Î™®Îì† ÏïåÎ¶ºÏùÑ ÏùΩÏùå Ï≤òÎ¶¨ÌñàÏäµÎãàÎã§.');
    } catch (error: any) {
      console.error('Ï†ÑÏ≤¥ ÏùΩÏùå Ï≤òÎ¶¨ Ïã§Ìå®:', error);
      toast.error('Ï†ÑÏ≤¥ ÏùΩÏùå Ï≤òÎ¶¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  // ÏïåÎ¶º ÏÇ≠Ï†ú
  const handleDelete = async (notificationId: string) => {
    try {
      await notificationAPI.delete(notificationId);
      
      setNotifications((prev) =>
        prev.filter((n) => n.id !== notificationId)
      );
      
      toast.success('ÏïåÎ¶ºÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
    } catch (error: any) {
      console.error('ÏïåÎ¶º ÏÇ≠Ï†ú Ïã§Ìå®:', error);
      toast.error('ÏïåÎ¶º ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  // ÏïåÎ¶º ÌÉÄÏûÖÎ≥Ñ ÏïÑÏù¥ÏΩò
  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'EVALUATION_COMPLETE':
        return 'üìä';
      case 'NEW_MESSAGE':
        return 'üí¨';
      case 'INTERVIEW_SCHEDULED':
        return 'üìÖ';
      case 'APPLICATION_UPDATE':
        return 'üìù';
      default:
        return 'üîî';
    }
  };

  // ÏÉÅÎåÄ ÏãúÍ∞Ñ ÌëúÏãú
  const getRelativeTime = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    
    if (minutes < 1) return 'Î∞©Í∏à Ï†Ñ';
    if (minutes < 60) return `${minutes}Î∂Ñ Ï†Ñ`;
    if (hours < 24) return `${hours}ÏãúÍ∞Ñ Ï†Ñ`;
    if (days < 7) return `${days}Ïùº Ï†Ñ`;
    
    return date.toLocaleDateString('ko-KR');
  };

  if (!isAuthenticated) return null;

  return (
    <div className="relative">
      {/* ÏïåÎ¶º Î≤ÑÌäº */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="relative rounded-full p-2 hover:bg-gray-100 transition-colors"
      >
        <Bell className="h-6 w-6 text-gray-700" />
        {unreadCount > 0 && (
          <Badge
            variant="destructive"
            className="absolute -top-1 -right-1 h-5 min-w-[20px] px-1 text-xs"
          >
            {unreadCount > 99 ? '99+' : unreadCount}
          </Badge>
        )}
      </button>

      {/* ÏïåÎ¶º Ìå®ÎÑê */}
      {isOpen && (
        <>
          {/* Î∞∞Í≤Ω Ïò§Î≤ÑÎ†àÏù¥ */}
          <div
            className="fixed inset-0 z-40"
            onClick={() => setIsOpen(false)}
          />
          
          {/* ÏïåÎ¶º Î™©Î°ù */}
          <Card className="absolute right-0 top-full z-50 mt-2 w-96 max-h-[600px] overflow-hidden shadow-xl">
            {/* Ìó§Îçî */}
            <div className="flex items-center justify-between border-b p-4">
              <h3 className="font-semibold text-gray-900">ÏïåÎ¶º</h3>
              <div className="flex items-center gap-2">
                {unreadCount > 0 && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={handleMarkAllAsRead}
                  >
                    <CheckCheck className="h-4 w-4 mr-1" />
                    Î™®Îëê ÏùΩÏùå
                  </Button>
                )}
                <button
                  onClick={() => setIsOpen(false)}
                  className="rounded-full p-1 hover:bg-gray-100"
                >
                  <X className="h-5 w-5 text-gray-500" />
                </button>
              </div>
            </div>

            {/* ÏïåÎ¶º Î™©Î°ù */}
            <div className="max-h-[500px] overflow-y-auto">
              {isLoading ? (
                <div className="flex items-center justify-center py-12">
                  <Loader2 className="h-6 w-6 animate-spin text-gray-400" />
                </div>
              ) : notifications.length === 0 ? (
                <div className="py-12 text-center">
                  <Bell className="mx-auto h-12 w-12 text-gray-300 mb-3" />
                  <p className="text-sm text-gray-500">ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§</p>
                </div>
              ) : (
                notifications.map((notification) => (
                  <div
                    key={notification.id}
                    className={`border-b p-4 transition-colors ${
                      notification.read
                        ? 'bg-white'
                        : 'bg-blue-50 hover:bg-blue-100'
                    }`}
                  >
                    <div className="flex items-start gap-3">
                      {/* ÏïÑÏù¥ÏΩò */}
                      <div className="text-2xl">
                        {getNotificationIcon(notification.type)}
                      </div>
                      
                      {/* ÎÇ¥Ïö© */}
                      <div className="flex-1 min-w-0">
                        <div className="flex items-start justify-between gap-2">
                          <h4 className="font-medium text-gray-900 text-sm">
                            {notification.title}
                          </h4>
                          {!notification.read && (
                            <Badge variant="default" className="shrink-0">
                              NEW
                            </Badge>
                          )}
                        </div>
                        <p className="mt-1 text-sm text-gray-600 line-clamp-2">
                          {notification.message}
                        </p>
                        <p className="mt-2 text-xs text-gray-400">
                          {getRelativeTime(notification.createdAt)}
                        </p>
                      </div>
                    </div>

                    {/* Ïï°ÏÖò Î≤ÑÌäº */}
                    <div className="mt-3 flex items-center gap-2">
                      {!notification.read && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleMarkAsRead(notification.id)}
                        >
                          <Check className="h-4 w-4 mr-1" />
                          ÏùΩÏùå
                        </Button>
                      )}
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleDelete(notification.id)}
                      >
                        <X className="h-4 w-4 mr-1" />
                        ÏÇ≠Ï†ú
                      </Button>
                    </div>
                  </div>
                ))
              )}
            </div>
          </Card>
        </>
      )}
    </div>
  );
}
