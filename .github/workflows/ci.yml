name: CI - Test & Lint

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [develop]

# 동시성 제어: 동일한 PR/브랜치에서 이전 실행 취소
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Backend Core 테스트
  test-service-core:
    name: Test Backend Core
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flex_recruiter_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout 코드
        uses: actions/checkout@v4
      
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: service-core/package-lock.json
      
      - name: 의존성 설치
        working-directory: service-core
        run: npm ci
      
      - name: Prisma 생성
        working-directory: service-core
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flex_recruiter_test
      
      - name: Prisma 마이그레이션
        working-directory: service-core
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flex_recruiter_test
      
      - name: 테스트 실행
        working-directory: service-core
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flex_recruiter_test
          JWT_SECRET: test-secret-key
          NODE_ENV: test

  # Backend AI 테스트
  test-service-ai:
    name: Test Backend AI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout 코드
        uses: actions/checkout@v4
      
      - name: Python 설정
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: uv 설치 및 캐싱
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "service-ai/requirements.txt"
      
      - name: 의존성 설치
        working-directory: service-ai
        run: uv pip install --system -r requirements.txt
      
      - name: 테스트 실행
        working-directory: service-ai
        run: |
          python -c "from app.services.embedding_service import calculate_cosine_similarity; print('✓ Import test passed')"
        env:
          OPENAI_API_KEY: sk-test-fake-key

  # Frontend 테스트
  test-app-web:
    name: Test Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout 코드
        uses: actions/checkout@v4
      
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app-web/package-lock.json
      
      - name: 의존성 설치
        working-directory: app-web
        run: npm ci
      
      - name: 린트 검사
        working-directory: app-web
        run: npm run lint || echo "⚠️  Linting에서 경고가 있습니다"
      
      - name: 테스트 실행
        working-directory: app-web
        run: npm test

